new.abstract.scraper <- function(eid2) {
  
  content.api.url <- paste0("https://api.elsevier.com/content/abstract/eid/", 
                            eid2, 
                            "?apiKey=", api.key, "&insttoken=", inst.token)
  
  content         <- httr::content(GET(content.api.url))$`abstracts-retrieval-response`
  
  subj <- suppressWarnings(tryCatch(paste(content$`subject-areas` %>% bind_rows() %>% pull(`@code`), collapse = "; "),
                                    error = function(e) {NA}
  ))
  
  abstract <- tryCatch(content$item$bibrecord$head$abstracts,
                       error = function(e) {NA}
  )
  
  groups <- content$item$bibrecord$head$`author-group` 
  
  ######## PARSE DATA
  multiple.afill <- is.null(groups$author) 
  author.no <- length(groups$author) # if multiple authors, this is the number of authors
  
  # 1 author, 1 or more affil
  if (author.no == 1) {
   
    
    affil <- groups$affiliation
    affil$organization <- paste(unlist(affil$organization), collapse = "; ")
    affil.d <-  affil[!sapply(affil, is.list)] %>% bind_rows() %>% mutate(seq.affil = i)
    author <- groups$author
    author.d <- author %>% bind_rows() %>% distinct(`@auid`, .keep_all = TRUE)
    
    end <- bind_cols(author.d, affil.d)
    
  }
  
  if (author.no > 1) {
    
    if (multiple.afill == TRUE) {
      
      author.d <- list()
      affil.d <- list()
      
      for (i in seq(groups)) {
        
        author.d[[i]] <- groups[[i]]$author %>% bind_rows() %>% distinct(`@auid`, .keep_all = TRUE) %>% mutate(seq.affil = i)
        
        affil <- groups[[i]]$affiliation
        
        affil$organization <- paste(unlist(affil$organization), collapse = "; ")
        
        affil.d[[i]] <- affil[!sapply(affil, is.list)] %>% bind_rows() %>% mutate(seq.affil = i)
        
      }
      
      affil.d <- affil.d %>% bind_rows()
      author.d <- author.d %>% bind_rows()
      
      affil.d
      author.d
      
      end <- left_join(author.d, affil.d)
      
    }
    
    if (multiple.afill == FALSE) {
      
      affil <- groups$affiliation
      affil$organization <- paste(unlist(affil$organization), collapse = "; ")
      affil.d <- affil %>% bind_rows()
      
      author.d <- groups$author %>% bind_rows() %>% distinct(`@auid`, .keep_all = TRUE)
      
      end <- bind_cols(author.d, affil.d) 
      
    }
    
  }
  
  end
  
}



check.limit <- function() {
  
  type <- readline("Which type do you want to see remaining calls for? (abstract/generic) ")
  
  if(!type %in% c("abstract", "generic")) stop('Exiting since you did not enter a correct value')
  
  if (type == "abstract") {
    
    c <- GET(paste0("https://api.elsevier.com/content/abstract/eid/2-s2.0-84903263494?apiKey=", 
                    api.key, "&insttoken=", inst.token))
    
    writeLines(paste0("Abstract scraper status:\n",
                      c$headers$`x-ratelimit-remaining`, " out of ",
                      c$headers$`x-ratelimit-limit`, " calls reamining."))
    
  }
  
  if (type == "generic") {
    
    c <- GET(paste0("https://api.elsevier.com/content/search/scopus?cursor=*&count=200&query=AF-ID(", "60024521", ")++AND+PUBYEAR+%3E+", 1980, "+AND+PUBYEAR+%3C+", 1990, "&apiKey=", api.key, "&insttoken=", inst.token))
    
    writeLines(paste0("Abstract scraper status:\n",
                      c$headers$`x-ratelimit-remaining`, " out of ",
                      c$headers$`x-ratelimit-limit`, " calls reamining."))
    
    
    
  }
  
}



clean.slade <- function(archive) {

  user_input <- readline("Are you sure you want to run this? It will delete all data (YES/NO) ")
  if(user_input != 'YES') stop('Exiting since you did not press YES')
  
  f <- list.files("Data/", include.dirs = F, full.names = T, recursive = T)
  
  if (setequal(f, character(0))) {
    stop("There are no files to delete")
  }
  
  archive.yes <- readline("Do you wish to make an archived version of the current files (YES/NO) ")
  
  if (archive.yes == "YES") {
    # we make an archived version if that is the wish
    file.archive <-paste0("Archived data/", gsub("[^0-9.-]", "_", Sys.time()))
    dir.create(file.archive)
    invisible(file.copy(from = f, to = gsub("Data/", file.archive, f)))
  
  }
  
  invisible(file.remove(f))
  
  if (archive.yes == "YES") {
    writeLines("Files have been archived")  
  }
  
  if (archive.yes == "NO") {
    writeLines("Files have been deleted")  
  }
  
  
}




